reduxではsingle-storeが推奨されている。

しかし、reduxのページにもsubappを作る方法は用意されている。
https://redux.js.org/recipes/isolating-redux-sub-apps/


reduxでapplication全体でstoreをまとめてしまうと、アクション名の重複が許されない。
DDDの概念に沿うならば、コンテキストが違うならば名前は重複しても良いくらい疎結合の方が良い。
アクション名の名前付けにルールをつける方法もあるが、ルールがなくて良いならない方が良い。


なので、できればコンテキストごとにstoreを分割して、
コンテキストごとにUI部品を作り、
それをアプリケーションがまとめる構成にしたい。


横断的関心事の扱いが難しいのが難点。
例えば、すべてのコンテキストでAPIコール時に認証トークンが必要になる。
認証トークンはauthコンテキストしかしらないので、コンテキストをまたいだデータの受け渡しが必要になる。

あとは、Providerの問題。
誰かがStoreの初期化をなければならないので、初期化済みの部品をコンテキスト側はexportできない。

部品使いたかったら自分でStoreを初期化して、Providerでくくってね、となってしまう。
Sagaを渡す必要もあり、SagaにはAPIのクライアントを渡す必要があり、APIClientにはAPIのエンドポイントが必要。

バックエンドと違ってフロントエンドはコンテキストごとに起動できないので、設定を知っているのはAppだけ。
結果、コンテキストごとに初期化するのは難しい。
