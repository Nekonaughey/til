@table('Test2')
export class TestRecord {
  /* eslint-disable @typescript-eslint/no-inferrable-types */
  @hashKey()
  public partitionKey: string = '';
  @rangeKey()　★ここでレンジキーを指定する。
  public sortKey: string = '';
  @attribute()
  public name: string = '';
  /* eslint-enable @typescript-eslint/no-inferrable-types */
}

// テーブル作成は変わらず
    try {
      await mapper.ensureTableExists(TestRecord, {
        readCapacityUnits: 5,
        writeCapacityUnits: 5,
      });
      console.log('repositoryCreated');
      return new TestRepository(mapper);
    } catch (error) {
      console.log(error);
      throw new Error(error);
    }
  }
  
  
  //　検索時はpartitionKeyとsortKeyを両方指定する
  async get(partitionKey: string, sortKey: string): Promise<TestRecord> {
    const record = await this.mapper.get(Object.assign(new TestRecord(), { partitionKey, sortKey }));　★

    console.log(record);
    return record;
  }
  
  
  // partitionKeyだけで検索
  async findByPartitionKey(partitionKey: string): Promise<TestRecord[]> {
    const records = this.mapper.query(TestRecord, { partitionKey });
    const results: TestRecord[] = [];
    for await (const record of records) {
      results.push(record);
    }
    console.log(results);
    return results;
  }
  
  
  
  
